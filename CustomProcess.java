/**
 * ////////////////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION////////////////////////////// 
 * // Title: SJF Process Scheduler
 * // Files: WaitingQueueADT.java, CustomProcess.java, CustomProcessQueue.java, 
 *           ProcessSchedulerTests.java, ProcessScheduler.java
 * // Course: CS 300 Fall term 2018 
 * // Author: Vedaant Tambi 
 * // Email: tambi@wisc.edu 
 * // Lecturer's Name: MOUNA AYARI BEN HADJ KACEM 
 * //////////////////////////////////////// CREDIT OUTSIDE HELP ////////////////////////////////////
 * //                                            Piazza                                           //
 * //////////////////////////////////////// 100 COLUMNS WIDE ///////////////////////////////////////
 */

/**
 * This class represents the type for the processes in our SJF process application. This class
 * implements the java.lang.Comparable interface over itself.
 * 
 * @author Vedaant Tambi
 * @version 1.0
 * @since 1.0
 */
public class CustomProcess implements java.lang.Comparable<CustomProcess> {
  private static int nextProcessId = 1; // stores the ID to be assigned to the next process
                                        // to be created
  private final int PROCESS_ID; // unique identifier for this process
  private int burstTime; // time required by this process for CPU execution

  /**
   * This constructor creates a process with a specific burst time and initializes the data fields
   * of the object
   * 
   * @param burstTime is the time required by this process for CPU execution
   */
  public CustomProcess(int burstTime) {

    // initialization of the data fields
    this.burstTime = burstTime;
    this.PROCESS_ID = nextProcessId;
    nextProcessId++; // the ID for the next process is generated by incrementing the static variable
  }

  /**
   * Retrieves the unique processing ID of this Process
   * 
   * @return the PROCESS_ID data field
   */
  public int getProcessId() {
    return PROCESS_ID; // getter for the PROCESS_ID field
  }

  /**
   * Retrieves the burst time (time required for CPU execution) of this process
   * 
   * @return the burst time of the process
   */
  public int getBurstTime() {
    return burstTime;
  }


  /**
   * This method compares two processes and checks which one of the two has higher priority,
   * returning an int value for the difference between them
   * 
   * @param other - the 2nd process against which this process is checked
   * @return the difference between the burst times (or Processing IDs, if burst times are equal)
   */
  @Override
  public int compareTo(CustomProcess other) {
    if (this.getBurstTime() != other.getBurstTime()) // checks if the burst times are equal
      return (this.getBurstTime() - other.getBurstTime()); // burst times determine the priority
    else // if burst times are equal, then Process IDs determine
      return (this.getProcessId() - other.getProcessId()); // IDs determine the priority
  }

}
